$module ()

//----------------------------------------------------------------------------//
// httpdb constants                                                           //
//----------------------------------------------------------------------------//

// The full base url to use for httpdb requests.
//string    HTTPDB_URL          = "http://w-hat.com/httpdb/";
string      HTTPDB_GO           = "http://w-hat.com/httpdb/general_orbital/eossat/";

//----------------------------------------------------------------------------//
// httpdb messages                                                            //
//----------------------------------------------------------------------------//

// If you want to use httpdb through link messages in another script, you should
// copy these constants. You then make requests with:
//   llMessageLinked( [link_number], [request_code], [value], [name] );
// ex:
//   llMessageLinked( LINK_SET, HTTPDB_SAVE, "some data", "log/example.log");

// Request codes. These are also used internally - do not remove them.
integer     HTTPDB_SAVE         = 1000;
integer     HTTPDB_LOAD         = 1100;
integer     HTTPDB_DELETE       = 1200;

// Response codes. If you don't want to use httpdb through link messages, you
// can remove these.
integer     HTTPDB_VALUE_LOADED = 5000;
integer     HTTPDB_FAILURE      = 5100;
integer     HTTPDB_SUCCESS      = 5200;

//----------------------------------------------------------------------------//
// httpdb variables                                                           //
//----------------------------------------------------------------------------//

// Strided [reqid, name, type] list of pending requests.
list        httpdb_reqids     = [];

// The amount of free space returned by last PUT/DELETE request.
integer     httpdb_free_space = -1;

//----------------------------------------------------------------------------//
// httpdb functions                                                           //
//----------------------------------------------------------------------------//

// Abstract httpdb request interface.
httpdb_request( integer type, string type_str, string name, string body ) {
    key reqid = llHTTPRequest(HTTPDB_GO + name, [HTTP_METHOD, type_str], body );
    if ( reqid == NULL_KEY )
        httpdb_failure( type, name, 0, "HTTP throttled" );
    else
        httpdb_reqids += [reqid, name, type];
}

// Save a value to httpdb.
httpdb_save( string name, string value ) {
    httpdb_request( HTTPDB_SAVE, "PUT", name, value );
}

/// Load a value from httpdb. The function httpdb_value_loaded() will be
/// called with the name and value when the request completes.
httpdb_load(string name) {
    httpdb_request( HTTPDB_LOAD, "GET", name, "" );
}

// Delete a value from httpdb.
httpdb_delete(string name) {
    httpdb_request( HTTPDB_DELETE, "DELETE", name, "" );
}

//----------------------------------------------------------------------------//
// httpdb "virtual" functions.                                                //
//----------------------------------------------------------------------------//
// If you don't want to put httpdb into a seperate script and use it through
// link messages, then you should replace the link message code with your own
// in these functions.

// Called when a value is successfully loaded.
httpdb_value_loaded(string name, string value) {

    //llMessageLinked(LINK_SET, HTTPDB_VALUE_LOADED, value, name);
    llWhisper(0,llGetObjectName()+" has loaded details.");

}

// Called when a request fails.
httpdb_failure( integer type, string name, integer status, string body) {

    // You can programatically handle errors here, or just report them.
    llWhisper(0, "[ERROR] httpdb returned status " + (string)status + " for " + (string)type + " on " + name );

    //llMessageLinked(LINK_SET, HTTPDB_FAILURE, llList2CSV([type, status, body]), name );

}

// Called when a request was successful.
httpdb_success(integer type, string name, integer status, string body) {

    //llMessageLinked(LINK_SET, HTTPDB_SUCCESS, llList2CSV([type, status, body]), name );
    llWhisper(0,llGetObjectName()+" has recorded details.");

}